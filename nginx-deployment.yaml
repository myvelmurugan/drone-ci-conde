apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "2020-08-05T17:49:02Z"
  generation: 1
  labels:
    app: drone-server
  name: drone-server
  namespace: drone
  resourceVersion: "3323887"
  selfLink: /apis/apps/v1/namespaces/drone/deployments/drone-server
  uid: 89bd424b-346f-47b7-a02c-8f093a021e92
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: drone-server
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: drone-server
    spec:
      containers:
      - env:
        - name: DRONE_SERVER_HOST
          valueFrom:
            configMapKeyRef:
              key: server.host
              name: drone-config
        - name: DRONE_GITHUB_CLIENT_ID
          valueFrom:
            configMapKeyRef:
              key: server.remote.github.client
              name: drone-config
        - name: DRONE_GITHUB_CLIENT_SECRET
          valueFrom:
            configMapKeyRef:
              key: server.remote.github.secret
              name: drone-config
        - name: DRONE_RPC_SECRET
          valueFrom:
            configMapKeyRef:
              key: server.rpc
              name: drone-config
        - name: DRONE_SERVER_PROTO
          valueFrom:
            configMapKeyRef:
              key: server.proto
              name: drone-config
        image: drone/drone:1
        imagePullPolicy: Always
        name: drone-server
        ports:
        - containerPort: 80
          protocol: TCP
        - containerPort: 443
          protocol: TCP
        resources:
          requests:
            cpu: 40m
            memory: 32Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/drone
          name: drone-volume
        - mountPath: /var/run/docker.sock
          name: docker-socket
      dnsPolicy: ClusterFirst
      nodeSelector:
        app: drone
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        key: app
        operator: Equal
        value: drone
      volumes:
      - awsElasticBlockStore:
          fsType: ext4
          volumeID: vol-0ae7f07a0aabec303
        name: drone-volume
      - hostPath:
          path: /var/run/docker.sock
          type: ""
        name: docker-socket
